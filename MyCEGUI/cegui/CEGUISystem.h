#pragma once

#include "CEGUIBase.h"
#include "CEGUIString.h"
#include "CEGUISingleton.h"
#include "CEGUIRenderer.h"
#include "CEGUIMouseCursor.h"
#include "CEGUIInputEvent.h"
#include "CEGUIResourceProvider.h"

namespace CEGUI
{
//! Implementation struct that tracks and controls multiclick for mouse buttons.
struct MouseClickTrackerImpl;


/*!
\brief
	The System class is the CEGUI class that provides access to all other elements in this system.

	This object must be created by the client application.  The System object requires that you pass it
	an initialised Renderer object which it can use to interface to whatever rendering system will be
	used to display the GUI imagery.
*/
class System : public Singleton<System>, public EventSet
{
public:
	static const String EventNamespace;				//!< Namespace for global events

	/*************************************************************************
		Constants
	*************************************************************************/
	static const double		DefaultSingleClickTimeout;		//!< Default timeout for generation of single click events.
	static const double		DefaultMultiClickTimeout;		//!< Default timeout for generation of multi-click events.
	static const Size		DefaultMultiClickAreaSize;		//!< Default allowable mouse movement for multi-click event generation.

	// event names
	static const String EventGUISheetChanged;
	static const String EventSingleClickTimeoutChanged;
	static const String EventMultiClickTimeoutChanged;
	static const String EventMultiClickAreaSizeChanged;
	static const String EventDefaultFontChanged;
	static const String EventDefaultMouseCursorChanged;
	static const String EventMouseMoveScalingChanged;
    static const String EventDisplaySizeChanged;
    static const String EventRenderedStringParserChanged;

	/*************************************************************************
		Construction and Destruction
	*************************************************************************/
    static System& create(Renderer& renderer,
                          ResourceProvider* resourceProvider = 0,
                          XMLParser* xmlParser = 0,
                          ImageCodec* imageCodec = 0,
                          ScriptModule* scriptModule = 0,
                          const String& configFile = "",
                          const String& logFile = "CEGUI.log");

    //static
    static void destroy();
	Renderer*	getRenderer(void) const			{return d_renderer;}

	static	System&	getSingleton(void);
	static	System*	getSingletonPtr(void);
	void	setDefaultFont(const String& name);
	void	setDefaultFont(Font* font);
	Font*	getDefaultFont(void) const				{return d_defaultFont;}
	//在下次renderGUI()的时候进行重绘
	void	signalRedraw()		{d_gui_redraw = true;}
	//下一次renderGUI()是否需要完全的重绘
	bool	isRedrawRequested() const		{return d_gui_redraw;}
	void	renderGUI(void);
	Window*	setGUISheet(Window* sheet);
	Window*	getGUISheet(void) const		{return d_activeSheet;}
	double	getSingleClickTimeout(void) const		{return d_click_timeout;}
	double	getMultiClickTimeout(void) const		{return d_dblclick_timeout;}
	const Size&	getMultiClickToleranceAreaSize(void) const		{return d_dblclick_size;}
	void	setSingleClickTimeout(double timeout);
	void setMultiClickTimeout(double timeout);
	void setMultiClickToleranceAreaSize(const Size&	sz);

    /*!
    \brief
        Return whether automatic mouse button click and multi-click (i.e.
        double-click and treble-click) event generation is enabled.

    \return
        - true if mouse button click and multi-click events will be
        automatically generated by the system from the basic button up and down
        event injections.
        - false if no automatic generation of events will occur.  In this
        instance the user may wish to use the additional event injectors to
        manually inform the system of such events.
    */
    bool isMouseClickEventGenerationEnabled() const;
    
    /*!
    \brief
        Set whether automatic mouse button click and multi-click (i.e.
        double-click and treble-click) event generation will occur.

    \param enable
        - true to have mouse button click and multi-click events automatically
        generated by the system from the basic button up and down event
        injections.
        - false if no automatic generation of events should occur.  In this
        instance the user may wish to use the additional event injectors to
        manually inform the system of such events.
    */
    void setMouseClickEventGenerationEnabled(const bool enable);
	const Image*	getDefaultMouseCursor(void) const	{return d_defaultMouseCursor;}
	void	setDefaultMouseCursor(const Image* image);
	void	setDefaultMouseCursor(MouseCursorImage image)		{setDefaultMouseCursor((const Image*)image);}
	//exception UnknownObjectException	thrown if \a imageset is not known, or if \a imageset contains no Image named \a image_name.
	void	setDefaultMouseCursor(const String& imageset, const String& image_name);
	Window*	getWindowContainingMouse(void) const	{return d_wndWithMouse;}
	ScriptModule*	getScriptingModule(void) const;
    void setScriptingModule(ScriptModule* scriptModule);
	ResourceProvider* getResourceProvider(void) const;
	void	executeScriptFile(const String& filename, const String& resourceGroup = "") const;
	int		executeScriptGlobal(const String& function_name) const;
    void executeScriptString(const String& str) const;
	float	getMouseMoveScaling(void) const;
	void	setMouseMoveScaling(float scaling);


	/*!
	\brief
		Internal method used to inform the System object whenever a window is destroyed, so that System can perform any required
		housekeeping.

	\note
		This method is not intended for client code usage.  If you use this method anything can, and probably will, go wrong!
	*/
	void	notifyWindowDestroyed(const Window* window);
    uint    getSystemKeys(void) const   { return d_sysKeys; }
    void setXMLParser(const String& parserName);
    void setXMLParser(XMLParser* parser);
    XMLParser* getXMLParser(void) const     { return d_xmlParser; }
    void setDefaultTooltip(Tooltip* tooltip);
    void setDefaultTooltip(const String& tooltipType);
    Tooltip* getDefaultTooltip(void) const;
	void setModalTarget(Window* target)		{d_modalTarget = target;}
	Window* getModalTarget(void) const		{return d_modalTarget;}

    /*!
    \brief
        Static member to set the name of the default XML parser module that
        should be used.

        If you want to modify the default parser from the one compiled in, you
        need to call this static member prior to instantiating the main
        CEGUI::System object.

        Note that calling this member to change the name of the default module
        after CEGUI::System, and therefore the default xml parser, has been
        created will have no real effect - the default parser name will be
        updated, though no actual changes to the xml parser module will occur.

        The built-in options for this are:
         - XercesParser
         - ExpatParser
         - LibxmlParser
         - TinyXMLParser

        Whether these are actually available, depends upon how you built the
        system.  If you have some custom parser, you can provide the name of
        that here to have it used as the default, though note that the
        final filename of the parser module should be of the form:

        [prefix]CEGUI[parserName][suffix]

        where:
        - [prefix] is some optional prefix; like 'lib' on linux.
        - CEGUI is a required prefix.
        - [parserName] is the name of the parser, as supplied to this function.
        - [suffix] is the filename suffix, like .dll or .so

        Final module filenames are, thus, of the form:
        - CEGUIXercesParser.dll
        - libCEGUIXercesParser.so

    \param parserName
        String describing the name of the xml parser module to be used as the
        default.

    \return
        Nothing.
    */
    static void setDefaultXMLParserName(const String& parserName);
    static const String getDefaultXMLParserName();
    
    /*!
    \brief
        Perform updates with regards to the window that contains the mouse
        cursor, firing any required MouseEnters / MouseLeaves events.
    
    \note
        The CEGUI system components call this member as a matter of course,
        in most cases there will be no need for user / client code to call this
        member directly.
    
    \return
        - true if the window containing the mouse had changed.
        - false if the window containing the mouse had not changed.
    */
    bool updateWindowContainingMouse();
    ImageCodec& getImageCodec() const;
    void setImageCodec(const String& codecName);
    void setImageCodec(ImageCodec& codec);
	//static
    static void setDefaultImageCodecName(const String& codecName);
	//static
    static const String& getDefaultImageCodecName();

    /*!
    \brief
        Notification function to be called when the main display changes size.
        Client code should call this function when the host window changes size,
        or if the display resolution is changed in full-screen mode.

        Calling this function ensures that any other parts of the system that
        need to know about display size changes are notified.  This affects
        things such as the MouseCursor default constraint area, and also the
        auto-scale functioning of Imagesets and Fonts.

    \note
        This function will also fire the System::EventDisplaySizeChanged event.

    \param new_size
        Size object describing the new display size in pixels.
    */
    void notifyDisplaySizeChanged(const Size& new_size);

    /*!
    \brief
        Return pointer to the currently set global default custom
        RenderedStringParser object.

        The returned RenderedStringParser is used for all windows that have
        parsing enabled and no custom RenderedStringParser set on the window
        itself.

        If this global custom RenderedStringParser is set to 0, then all windows
        with parsing enabled and no custom RenderedStringParser set on the
        window itself will use the systems BasicRenderedStringParser. 
    */
    RenderedStringParser* getDefaultCustomRenderedStringParser() const;

    /*!
    \brief
        Set the global default custom RenderedStringParser object.  This change
        is reflected the next time an affected window reparses it's text.  This
        may be set to 0 for no system wide custom parser (which is the default).

        The set RenderedStringParser is used for all windows that have
        parsing enabled and no custom RenderedStringParser set on the window
        itself.

        If this global custom RenderedStringParser is set to 0, then all windows
        with parsing enabled and no custom RenderedStringParser set on the
        window itself will use the systems BasicRenderedStringParser. 
    */
    void setDefaultCustomRenderedStringParser(RenderedStringParser* parser);

    /*!
    \brief
        Invalidate all imagery and geometry caches for CEGUI managed elements.

        This function will invalidate the caches used for both imagery and
        geometry for all content that is managed by the core CEGUI manager
        objects, causing a full and total redraw of that content.  This
        includes Window object's cached geometry, rendering surfaces and
        rendering windows and the mouse pointer geometry.
    */
    void invalidateAllCachedRendering();

	/*************************************************************************
		Input injection interface
	*************************************************************************/
	bool	injectMouseMove(float delta_x, float delta_y);
	bool	injectMouseLeaves(void);
	bool	injectMouseButtonDown(MouseButton button);
	bool	injectMouseButtonUp(MouseButton button);
	bool	injectKeyDown(uint key_code);
	bool	injectKeyUp(uint key_code);
	bool	injectChar(utf32 code_point);
	bool	injectMouseWheelChange(float delta);
	bool	injectMousePosition(float x_pos, float y_pos);
	bool	injectTimePulse(float timeElapsed);
    bool injectMouseButtonClick(const MouseButton button);
    bool injectMouseButtonDoubleClick(const MouseButton button);
    bool injectMouseButtonTripleClick(const MouseButton button);

private:
    // unimplemented constructors / assignment
    System(const System& obj);
    System& operator=(const System& obj);

	/*************************************************************************
		Implementation Functions
	*************************************************************************/
    /*!
    \brief
        Construct a new System object

    \param renderer
        Reference to a valid Renderer object that will be used to render GUI
        imagery.

    \param resourceProvider
        Pointer to a ResourceProvider object, or NULL to use whichever default
        the Renderer provides.

    \param xmlParser
        Pointer to a valid XMLParser object to be used when parsing XML files,
        or NULL to use a default parser.

    \param imageCodec
        Pointer to a valid ImageCodec object to be used when loading image
        files, or NULL to use a default image codec.

    \param scriptModule
        Pointer to a ScriptModule object.  may be NULL for none.

    \param configFile
        String object containing the name of a configuration file to use.

    \param logFile
        String object containing the name to use for the log file.
    */
    System(Renderer& renderer, ResourceProvider* resourceProvider,
           XMLParser* xmlParser, ImageCodec* imageCodec,
           ScriptModule* scriptModule, const String& configFile,
           const String& logFile);
	//不能被继承
    ~System(void);
	Window*	getTargetWindow(const Point& pt, const bool allow_disabled) const;
	Window* getKeyboardTargetWindow(void) const;
	Window* getNextTargetWindow(Window* w) const;
	SystemKey	mouseButtonToSyskey(MouseButton btn) const;
	SystemKey	keyCodeToSyskey(Key::Scan key, bool direction);

    //! output the standard log header
    void outputLogHeader();

    //! adds factories for all the basic window types
    void addStandardWindowFactories();

    //! create the other core system singleton objects (except the logger)
    void createSingletons();

    //! cleanup the core system singleton objects
    void destroySingletons();

    //! handle creation and initialisation of the XML parser.
    void setupXMLParser();

    //! handle cleanup of the XML parser
    void cleanupXMLParser();

    //! common function used for injection of mouse positions and movements
    bool mouseMoveInjection_impl(MouseEventArgs& ma);

    //! setup image codec 
    void setupImageCodec(const String& codecName);

    //! cleanup image codec 
    void cleanupImageCodec();

    //! Set the CEGUI version string that gets output to the log.
    void initialiseVersionString();

    //! invalidate all windows and any rendering surfaces they may be using.
    void invalidateAllWindows();

    //! return common ancestor of two windows.
    Window* getCommonAncestor(Window* w1, Window* w2);

    //! call some function for a chain of windows: (top, bottom]
    void notifyMouseTransition(Window* top, Window* bottom,
                               void (Window::*func)(MouseEventArgs&),
                               MouseEventArgs& args);
    //! create a window of type d_defaultTooltipType for use as the Tooltip
    void createSystemOwnedDefaultTooltipWindow() const;
    //! destroy the default tooltip window if the system owns it.
    void destroySystemOwnedDefaultTooltipWindow();

	/*************************************************************************
		Handlers for System events
	*************************************************************************/
	void	onGUISheetChanged(WindowEventArgs& e);
	void	onSingleClickTimeoutChanged(EventArgs& e);
	void	onMultiClickTimeoutChanged(EventArgs& e);
	void	onMultiClickAreaSizeChanged(EventArgs& e);
	void	onDefaultFontChanged(EventArgs& e);
	void	onDefaultMouseCursorChanged(EventArgs& e);
	void	onMouseMoveScalingChanged(EventArgs& e);


	/*************************************************************************
		Implementation Data
	*************************************************************************/
	Renderer*	d_renderer;			//!< Holds the pointer to the Renderer object given to us in the constructor
    ResourceProvider* d_resourceProvider;      //!< Holds the pointer to the ResourceProvider object given to us by the renderer or the System constructor.
	bool d_ourResourceProvider;
    Font*		d_defaultFont;		//!< Holds a pointer to the default GUI font.
	bool		d_gui_redraw;		//!< True if GUI should be re-drawn, false if render should re-use last times queue.

	Window*		d_wndWithMouse;		//!< Pointer to the window that currently contains the mouse.
	Window*		d_activeSheet;		//!< The active GUI sheet (root window)
	Window*		d_modalTarget;		//!< Pointer to the window that is the current modal target. NULL is there is no modal target.

	String d_strVersion;    //!< CEGUI version

	uint		d_sysKeys;			//!< Current set of system keys pressed (in mk1 these were passed in, here we track these ourself).
	bool		d_lshift;			//!< Tracks state of left shift.
	bool		d_rshift;			//!< Tracks state of right shift.
	bool		d_lctrl;			//!< Tracks state of left control.
	bool		d_rctrl;			//!< Tracks state of right control.
	bool		d_lalt;				//!< Tracks state of left alt.
	bool		d_ralt;				//!< Tracks state of right alt.

	double		d_click_timeout;	//!< Timeout value, in seconds, used to generate a single-click (button down then up)
	double		d_dblclick_timeout;	//!< Timeout value, in seconds, used to generate multi-click events (botton down, then up, then down, and so on).
	Size		d_dblclick_size;	//!< Size of area the mouse can move and still make multi-clicks.

	MouseClickTrackerImpl* const	d_clickTrackerPimpl;		//!< Tracks mouse button click generation.

	// mouse cursor related
	const Image*	d_defaultMouseCursor;		//!< Image to be used as the default mouse cursor.

	// scripting
	ScriptModule*	d_scriptModule;			//!< Points to the scripting support module.
	String			d_termScriptName;		//!< Name of the script to run upon system shutdown.

	float	d_mouseScalingFactor;			//!< Scaling applied to mouse movement inputs.

    XMLParser*  d_xmlParser;        //!< XMLParser object we use to process xml files.
    bool        d_ourXmlParser;     //!< true when we created the xml parser.
    DynamicModule* d_parserModule;  //! pointer to parser module.

    //! System default tooltip object.
    mutable Tooltip* d_defaultTooltip;
    //! true if System created d_defaultTooltip.
    mutable bool d_weOwnTooltip;
    //! type of window to create as d_defaultTooltip
    String d_defaultTooltipType;

    static String   d_defaultXMLParserName; //!< Holds name of default XMLParser

    //! Holds a pointer to the image codec to use.
    ImageCodec* d_imageCodec;
    //! true when we created the image codec.
    bool d_ourImageCodec;
    /** Holds a pointer to the image codec module. If d_imageCodecModule is 0 we
     *  are not owner of the image codec object
     */
    DynamicModule* d_imageCodecModule;
    //! Holds the name of the default codec to use.
    static String d_defaultImageCodecName;
    //! true when we created the CEGUI::Logger based object.
    bool d_ourLogger;
    //! currently set global RenderedStringParser.
    RenderedStringParser* d_customRenderedStringParser;
    //! true if mouse click events will be automatically generated.
    bool d_generateMouseClickEvents;
};

}